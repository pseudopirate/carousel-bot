export function getRandomElement(items: any[]) {
    const index = Math.floor(Math.random() * items.length);

    return items[index];
}

const synonyms = [
    '–∫–∞–∫–∞—à–∫–∞—Ö',
    '–¥–µ—Ä—å–º–∏—â–µ',
    '–≥—É–∞–Ω–æ',
    '–Ω–∞–≤–æ–∑–µ',
    '–≥–æ–≤–µ—à–∫–∞—Ö',
    '–ø—Ä–æ–ø–µ—Ä–¥–æ–ª—å–∫–∞—Ö',
    '–∫–∞–ª–µ',
    '—Ñ–µ–∫–∞–ª–∏—è—Ö',
    '–Ω–µ—á–∏—Å—Ç–æ—Ç–∞—Ö',
    '—ç–∫—Å–∫—Ä–µ–º–µ–Ω—Ç–∞—Ö',
    '–∫–∞–ª–æ–≤—ã—Ö –º–∞—Å—Å–∞—Ö',
];

const w = 'üí¶';

export function getGovnoLevel(index: number, isWater = false) {
    const levels = [
        '–ø–æ —â–∏–∫–æ–ª–æ—Ç–∫—É –≤ ',
        '–ø–æ –∫–æ–ª–µ–Ω–æ –≤ ',
        '–ø–æ –ø–æ—è—Å –≤ ',
        '–ø–æ –ø—É–ø–æ–∫ –≤ ',
        '–ø–æ —Ä–µ–±—Ä–∞ –≤ ',
        '–ø–æ —Å–æ—Å—Ü—ã –≤ ',
        '–ø–æ –ø–ª–µ—á–∏ –≤ ',
        '–ø–æ —à–µ—é –≤ ',
        '–ø–æ –ø–æ–¥–±–æ—Ä–æ–¥–æ–∫ –≤ ',
        '–ø–æ –Ω–æ—Å –≤ ',
        '–ø–æ –≥–ª–∞–∑–∞ –≤ ',
    ];
    const level = levels[index];
    const suffix = isWater ? `${w}–≤–æ–¥–µ${w}` : getRandomElement(synonyms);

    if (level) {
        return level + suffix;
    }

    return `—É—Ç–æ–Ω—É–ª –≤ ${suffix}`;
}

export function getPlayerName(player: {name: string; username?: string}) {
    return player.username ? `@${player.username}` : player.name;
}

const intros = [
    ['–ü–µ–Ω—å', '–°—Ç–æ–ª–±', '–ù–æ—Å'],
    ['–°—Ç–∏–ª—å', '–®–∏–∫', '–°–≤–æ–ª–æ—á—å!'],
    ['–î–µ–Ω—å', '–ü—Ä–æ—à–µ–ª', '–ö–∞–∫—Ç—É—Å'],
];

export function getPidorIntro() {
    return getRandomElement(intros) as string[];
}

export function sleep(ms = 3000) {
    return new Promise<void>((res) => {
        setTimeout(() => {
            res();
        }, ms);
    });
}

// eslint-disable-next-line no-unused-vars
type ForEachCb<T> = (item: T, index: number, items: T[]) => Promise<any>;

export async function asyncForEach<T>(array: T[], callback: ForEachCb<T>) {
    for (let index = 0; index < array.length; index++) {
        await callback(array[index], index, array); // eslint-disable-line no-await-in-loop
    }
}
