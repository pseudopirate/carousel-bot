import * as dotenv from 'dotenv';
import path from 'path';

dotenv.config({ path: path.join(__dirname, '../.env') });
/* eslint-disable import/first */
import { Telegraf } from 'telegraf';
import {
    getGovnoStats,
    getPidorStats,
    insertChat,
    insertGovnar,
    insertPidor,
    insertPlayer,
    listPlayers,
    listTodaysGovnars,
    listTodaysPidors,
} from './db';
import {
    asyncForEach, getGovnoLevel, getPidorIntro, getPlayerName, getRandomElement, sleep,
} from './utils';
/* eslint-enable import/first */

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN as string);

bot.start((ctx) => {
    const chat = ctx.update.message.chat as unknown as {id: string; title: string; type: string;};
    if (chat.type === 'private') {
        return ctx.reply('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö');
    }
    insertChat.run({ chatId: chat.id, name: chat.title });
    return ctx.reply('–ê –∂–∏–∑–Ω—å –≤–µ—Å–µ–ª—ã–π –∫–∞—Ä–Ω–∞–≤–∞–ª');
});

bot.command('reg', (ctx) => {
    /* eslint-disable camelcase */
    const {
        from: {
            username, first_name, last_name, id,
        }, chat,
    } = ctx.update.message;
    const name = `${first_name} ${last_name}`;
    try {
        insertPlayer.run({
            chatId: chat.id,
            name,
            username,
            id: `${chat.id}:${id}`,
        });
        return ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, ${username || name}`, { parse_mode: 'HTML' });
    } catch (error) {
        console.log(error);
        return ctx.reply('–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    }
    /* eslint-enable camelcase */
});

const s = 'üí©';

bot.command('govno', async (ctx) => {
    const { chat } = ctx.update.message;

    const players = listPlayers.all(chat.id);

    if (players.length === 0) {
        return ctx.reply('–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg');
    }

    const today = listTodaysGovnars.all(chat.id);

    if (today.length > 0) {
        const [player] = today;

        return ctx.reply(`–ü—Ä–æ–ø–µ—Ä–¥–æ–ª—å–∫–∞ –¥–Ω—è: ${getPlayerName(player)}. –ó–∞–≤—Ç—Ä–∞ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é`, { parse_mode: 'HTML' });
    }

    const govnoPlayer = getRandomElement(players);
    insertGovnar.run({
        createdAt: Date.now(),
        playerId: govnoPlayer.id,
    });
    const stats = getGovnoStats.all(govnoPlayer.chat_id) as {name: string; count: number}[];
    const playerStat = stats.find((stat) => stat.name === govnoPlayer.name);

    if (playerStat) {
        const level = getGovnoLevel(playerStat.count - 1);
        return ctx.reply(`–¢–µ–ø–µ—Ä—å ${getPlayerName(playerStat)} ${level}`, { parse_mode: 'HTML' });
    }

    return ctx.reply('–£—É—É–ø—Å! –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å');
});

bot.command('govnostats', (ctx) => {
    const { chat } = ctx.update.message;
    const stats = getGovnoStats.all(chat.id) as {name: string; count: number; username?: string;}[];

    if (stats.length === 0) {
        return ctx.reply(`–£—Ç–µ—á–µ–∫ ${s} –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ`);
    }
    const msg = stats.reduce((acc, stat, i) => {
        const name = stat.username || stat.name;
        const isWater = /–Ω–∞—Å—Ç—è|–∞–Ω–∞—Å—Ç–∞—Å–∏—è|anastasia|nastya/gi.test(name.toLocaleLowerCase());
        const level = getGovnoLevel(stat.count - 1, isWater);
        return `${acc}\n${i + 1}. <b>${stat.username || stat.name}</b> - ${level}`;
    }, '');
    return ctx.reply(msg, { parse_mode: 'HTML' });
});

bot.command('pidor', async (ctx) => {
    const { chat } = ctx.update.message;

    const players = listPlayers.all(chat.id);

    if (players.length === 0) {
        return ctx.reply('–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg');
    }

    const today = listTodaysPidors.all(chat.id);

    if (today.length > 0) {
        const [player] = today;

        return ctx.reply(`–ü–æ–ª–æ–∂–µ–Ω–∏–µ –ú–∞—Ä—Å–∞ –∏ –í–µ–Ω–µ—Ä—ã –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è ${getPlayerName(player)} - <b>–ø–∏–¥–æ—Ä</b>`, { parse_mode: 'HTML' });
    }

    const pidorPlayer = getRandomElement(players);
    insertPidor.run({
        createdAt: Date.now(),
        playerId: pidorPlayer.id,
    });
    const stats = getPidorStats.all(pidorPlayer.chat_id) as {name: string; count: number}[];
    const playerStat = stats.find((stat) => stat.name === pidorPlayer.name);

    if (playerStat) {
        const intros = getPidorIntro();
        await asyncForEach(intros, async (intro, i) => {
            await ctx.reply(intro);
            const ms = 2000 + i * 1000;
            await sleep(ms);
        });
        return ctx.reply(`–ê ${getPlayerName(playerStat)} - <b>–ø–∏–¥–æ—Ä</b>`, { parse_mode: 'HTML' });
    }

    return ctx.reply('–£—É—É–ø—Å! –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å');
});

bot.command('pidorstats', (ctx) => {
    const { chat } = ctx.update.message;
    const stats = getPidorStats.all(chat.id) as {name: string; count: number; username?: string;}[];

    if (stats.length === 0) {
        return ctx.reply('–ü–∏–¥–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    const msg = stats.reduce((acc, stat, i) => {
        const name = stat.username || stat.name;

        return `${acc}\n${i + 1}. <b>${name}</b> - <i>${stat.count} —Ä–∞–∑</i>`;
    }, '–¢–æ–ø-10 <b>–ø–∏–¥–æ—Ä–æ–≤</b> –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥:');
    return ctx.reply(msg, { parse_mode: 'HTML' });
});

bot.launch();
